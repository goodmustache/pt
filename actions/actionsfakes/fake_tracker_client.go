// Code generated by counterfeiter. DO NOT EDIT.
package actionsfakes

import (
	"sync"

	"github.com/goodmustache/pt/actions"
	"github.com/goodmustache/pt/tracker"
)

type FakeTrackerClient struct {
	TokenInformationStub        func() (tracker.TokenInformation, error)
	tokenInformationMutex       sync.RWMutex
	tokenInformationArgsForCall []struct {
	}
	tokenInformationReturns struct {
		result1 tracker.TokenInformation
		result2 error
	}
	tokenInformationReturnsOnCall map[int]struct {
		result1 tracker.TokenInformation
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTrackerClient) TokenInformation() (tracker.TokenInformation, error) {
	fake.tokenInformationMutex.Lock()
	ret, specificReturn := fake.tokenInformationReturnsOnCall[len(fake.tokenInformationArgsForCall)]
	fake.tokenInformationArgsForCall = append(fake.tokenInformationArgsForCall, struct {
	}{})
	fake.recordInvocation("TokenInformation", []interface{}{})
	fake.tokenInformationMutex.Unlock()
	if fake.TokenInformationStub != nil {
		return fake.TokenInformationStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tokenInformationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTrackerClient) TokenInformationCallCount() int {
	fake.tokenInformationMutex.RLock()
	defer fake.tokenInformationMutex.RUnlock()
	return len(fake.tokenInformationArgsForCall)
}

func (fake *FakeTrackerClient) TokenInformationCalls(stub func() (tracker.TokenInformation, error)) {
	fake.tokenInformationMutex.Lock()
	defer fake.tokenInformationMutex.Unlock()
	fake.TokenInformationStub = stub
}

func (fake *FakeTrackerClient) TokenInformationReturns(result1 tracker.TokenInformation, result2 error) {
	fake.tokenInformationMutex.Lock()
	defer fake.tokenInformationMutex.Unlock()
	fake.TokenInformationStub = nil
	fake.tokenInformationReturns = struct {
		result1 tracker.TokenInformation
		result2 error
	}{result1, result2}
}

func (fake *FakeTrackerClient) TokenInformationReturnsOnCall(i int, result1 tracker.TokenInformation, result2 error) {
	fake.tokenInformationMutex.Lock()
	defer fake.tokenInformationMutex.Unlock()
	fake.TokenInformationStub = nil
	if fake.tokenInformationReturnsOnCall == nil {
		fake.tokenInformationReturnsOnCall = make(map[int]struct {
			result1 tracker.TokenInformation
			result2 error
		})
	}
	fake.tokenInformationReturnsOnCall[i] = struct {
		result1 tracker.TokenInformation
		result2 error
	}{result1, result2}
}

func (fake *FakeTrackerClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tokenInformationMutex.RLock()
	defer fake.tokenInformationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTrackerClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actions.TrackerClient = new(FakeTrackerClient)
